/**
 * Report Schema - Data Structures for Performance Reporting
 *
 * This module defines the TypeScript interfaces and schemas for the structured
 * report data that will be generated by the AnalysisEngine. These structures
 * serve as the contract between the analysis logic and any future rendering system.
 *
 * Required by ticket #5787 - ReportData interface specification.
 */
import { z } from 'zod';
import { MatrixConfig } from '../../scenario/src/matrix-schema';
import { ScenarioRunResult } from '../../scenario/src/schema';
/**
 * High-level summary statistics calculated across all runs
 */
export interface ReportSummaryStats {
    /** Total number of runs analyzed */
    total_runs: number;
    /** Number of runs that failed to complete */
    total_failed_runs: number;
    /** Average execution time across all runs (in seconds) */
    average_execution_time: number;
    /** Median execution time across all runs (in seconds) */
    median_execution_time: number;
    /** Average number of LLM calls per run */
    average_llm_calls: number;
    /** Average total tokens used per run */
    average_total_tokens: number;
    /** Success rates for each capability/evaluation type */
    capability_success_rates: Record<string, number>;
    /** Overall success rate (percentage of runs that completed without error) */
    overall_success_rate: number;
}
/**
 * Information about a common trajectory pattern
 */
export interface CommonTrajectory {
    /** Sequence of trajectory step types */
    sequence: string[];
    /** Number of runs that followed this trajectory */
    count: number;
    /** Average duration for runs following this trajectory */
    average_duration: number;
    /** Percentage of total runs that followed this trajectory */
    percentage: number;
}
/**
 * Complete structured report data generated by the AnalysisEngine
 */
export interface ReportData {
    /** Report metadata and generation info */
    metadata: {
        /** When this report was generated */
        report_generated_at: string;
        /** The original matrix configuration that was analyzed */
        matrix_config: MatrixConfig;
        /** Input directory that was processed */
        input_directory: string;
        /** Number of run files that were successfully processed */
        processed_files: number;
        /** Number of files that were skipped due to errors */
        skipped_files: number;
    };
    /** High-level summary statistics across all runs */
    summary_stats: ReportSummaryStats;
    /** Statistics grouped by each matrix parameter */
    results_by_parameter: {
        [parameter_name: string]: {
            [parameter_value: string]: ReportSummaryStats;
        };
    };
    /** Most common agent trajectory patterns */
    common_trajectories: CommonTrajectory[];
    /** All original run results for detailed analysis */
    raw_results: ScenarioRunResult[];
}
/**
 * Zod schema for validating ReportData structure
 */
export declare const ReportSummaryStatsSchema: z.ZodObject<{
    total_runs: z.ZodNumber;
    total_failed_runs: z.ZodNumber;
    average_execution_time: z.ZodNumber;
    median_execution_time: z.ZodNumber;
    average_llm_calls: z.ZodNumber;
    average_total_tokens: z.ZodNumber;
    capability_success_rates: z.ZodRecord<z.ZodString, z.ZodNumber>;
    overall_success_rate: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    total_runs: number;
    total_failed_runs: number;
    average_execution_time: number;
    median_execution_time: number;
    average_llm_calls: number;
    average_total_tokens: number;
    capability_success_rates: Record<string, number>;
    overall_success_rate: number;
}, {
    total_runs: number;
    total_failed_runs: number;
    average_execution_time: number;
    median_execution_time: number;
    average_llm_calls: number;
    average_total_tokens: number;
    capability_success_rates: Record<string, number>;
    overall_success_rate: number;
}>;
export declare const CommonTrajectorySchema: z.ZodObject<{
    sequence: z.ZodArray<z.ZodString, "many">;
    count: z.ZodNumber;
    average_duration: z.ZodNumber;
    percentage: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    count: number;
    sequence: string[];
    average_duration: number;
    percentage: number;
}, {
    count: number;
    sequence: string[];
    average_duration: number;
    percentage: number;
}>;
export declare const ReportDataSchema: z.ZodObject<{
    metadata: z.ZodObject<{
        report_generated_at: z.ZodEffects<z.ZodString, string, string>;
        matrix_config: z.ZodAny;
        input_directory: z.ZodString;
        processed_files: z.ZodNumber;
        skipped_files: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        report_generated_at: string;
        input_directory: string;
        processed_files: number;
        skipped_files: number;
        matrix_config?: any;
    }, {
        report_generated_at: string;
        input_directory: string;
        processed_files: number;
        skipped_files: number;
        matrix_config?: any;
    }>;
    summary_stats: z.ZodObject<{
        total_runs: z.ZodNumber;
        total_failed_runs: z.ZodNumber;
        average_execution_time: z.ZodNumber;
        median_execution_time: z.ZodNumber;
        average_llm_calls: z.ZodNumber;
        average_total_tokens: z.ZodNumber;
        capability_success_rates: z.ZodRecord<z.ZodString, z.ZodNumber>;
        overall_success_rate: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        total_runs: number;
        total_failed_runs: number;
        average_execution_time: number;
        median_execution_time: number;
        average_llm_calls: number;
        average_total_tokens: number;
        capability_success_rates: Record<string, number>;
        overall_success_rate: number;
    }, {
        total_runs: number;
        total_failed_runs: number;
        average_execution_time: number;
        median_execution_time: number;
        average_llm_calls: number;
        average_total_tokens: number;
        capability_success_rates: Record<string, number>;
        overall_success_rate: number;
    }>;
    results_by_parameter: z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodObject<{
        total_runs: z.ZodNumber;
        total_failed_runs: z.ZodNumber;
        average_execution_time: z.ZodNumber;
        median_execution_time: z.ZodNumber;
        average_llm_calls: z.ZodNumber;
        average_total_tokens: z.ZodNumber;
        capability_success_rates: z.ZodRecord<z.ZodString, z.ZodNumber>;
        overall_success_rate: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        total_runs: number;
        total_failed_runs: number;
        average_execution_time: number;
        median_execution_time: number;
        average_llm_calls: number;
        average_total_tokens: number;
        capability_success_rates: Record<string, number>;
        overall_success_rate: number;
    }, {
        total_runs: number;
        total_failed_runs: number;
        average_execution_time: number;
        median_execution_time: number;
        average_llm_calls: number;
        average_total_tokens: number;
        capability_success_rates: Record<string, number>;
        overall_success_rate: number;
    }>>>;
    common_trajectories: z.ZodArray<z.ZodObject<{
        sequence: z.ZodArray<z.ZodString, "many">;
        count: z.ZodNumber;
        average_duration: z.ZodNumber;
        percentage: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        count: number;
        sequence: string[];
        average_duration: number;
        percentage: number;
    }, {
        count: number;
        sequence: string[];
        average_duration: number;
        percentage: number;
    }>, "many">;
    raw_results: z.ZodArray<z.ZodAny, "many">;
}, "strip", z.ZodTypeAny, {
    metadata: {
        report_generated_at: string;
        input_directory: string;
        processed_files: number;
        skipped_files: number;
        matrix_config?: any;
    };
    summary_stats: {
        total_runs: number;
        total_failed_runs: number;
        average_execution_time: number;
        median_execution_time: number;
        average_llm_calls: number;
        average_total_tokens: number;
        capability_success_rates: Record<string, number>;
        overall_success_rate: number;
    };
    results_by_parameter: Record<string, Record<string, {
        total_runs: number;
        total_failed_runs: number;
        average_execution_time: number;
        median_execution_time: number;
        average_llm_calls: number;
        average_total_tokens: number;
        capability_success_rates: Record<string, number>;
        overall_success_rate: number;
    }>>;
    common_trajectories: {
        count: number;
        sequence: string[];
        average_duration: number;
        percentage: number;
    }[];
    raw_results: any[];
}, {
    metadata: {
        report_generated_at: string;
        input_directory: string;
        processed_files: number;
        skipped_files: number;
        matrix_config?: any;
    };
    summary_stats: {
        total_runs: number;
        total_failed_runs: number;
        average_execution_time: number;
        median_execution_time: number;
        average_llm_calls: number;
        average_total_tokens: number;
        capability_success_rates: Record<string, number>;
        overall_success_rate: number;
    };
    results_by_parameter: Record<string, Record<string, {
        total_runs: number;
        total_failed_runs: number;
        average_execution_time: number;
        median_execution_time: number;
        average_llm_calls: number;
        average_total_tokens: number;
        capability_success_rates: Record<string, number>;
        overall_success_rate: number;
    }>>;
    common_trajectories: {
        count: number;
        sequence: string[];
        average_duration: number;
        percentage: number;
    }[];
    raw_results: any[];
}>;
//# sourceMappingURL=report-schema.d.ts.map