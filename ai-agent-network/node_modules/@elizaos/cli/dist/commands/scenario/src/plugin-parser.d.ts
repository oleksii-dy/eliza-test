import { PluginReference } from './schema';
import { Plugin } from '@elizaos/core';
export interface ParsedPlugin {
    name: string;
    version?: string;
    config?: Record<string, any>;
    enabled: boolean;
    originalReference: PluginReference;
    loadedPlugin?: Plugin;
}
export interface PluginValidationResult {
    valid: boolean;
    plugins: ParsedPlugin[];
    errors: string[];
    warnings: string[];
}
/**
 * Parse and validate plugin references from scenario configuration
 */
export declare class PluginParser {
    /**
     * Parse plugin references from scenario configuration
     */
    static parsePlugins(pluginReferences: PluginReference[] | undefined): ParsedPlugin[];
    /**
     * Validate parsed plugins dynamically
     */
    static validatePlugins(plugins: ParsedPlugin[]): Promise<PluginValidationResult>;
    /**
     * Parse and validate plugins from scenario configuration
     */
    static parseAndValidate(pluginReferences: PluginReference[] | undefined): Promise<PluginValidationResult>;
    /**
     * Check if plugin name follows valid format
     */
    private static isValidPluginName;
    /**
     * Validate version string
     */
    private static isValidVersion;
    /**
     * Validate plugin configuration object
     */
    private static isValidConfig;
    /**
     * Generate plugin loading summary
     */
    static generateSummary(result: PluginValidationResult): string;
}
//# sourceMappingURL=plugin-parser.d.ts.map