import { AgentRuntime } from '@elizaos/core';
import { ExecutionResult } from './providers';
import { Evaluator, EvaluationResult } from './EvaluationEngine';
import { Evaluation as EvaluationSchema } from './schema';
/**
 * Evaluates conversation length against specified criteria
 */
export declare class ConversationLengthEvaluator implements Evaluator {
    evaluate(params: EvaluationSchema, runResult: ExecutionResult): Promise<EvaluationResult>;
}
/**
 * Evaluates conversation flow patterns
 */
export declare class ConversationFlowEvaluator implements Evaluator {
    evaluate(params: EvaluationSchema, runResult: ExecutionResult, runtime: AgentRuntime): Promise<EvaluationResult>;
    private detectPattern;
}
/**
 * Evaluates user satisfaction based on conversation content
 */
export declare class UserSatisfactionEvaluator implements Evaluator {
    evaluate(params: EvaluationSchema, runResult: ExecutionResult, runtime: AgentRuntime): Promise<EvaluationResult>;
    private analyzeKeywords;
    private analyzeSentiment;
    private judgeWithLLM;
}
/**
 * Evaluates agent's ability to retain context across conversation turns
 */
export declare class ContextRetentionEvaluator implements Evaluator {
    evaluate(params: EvaluationSchema, runResult: ExecutionResult, runtime: AgentRuntime): Promise<EvaluationResult>;
    private parseConversationTurns;
    private testMemoryRetention;
    private checkMemoryInTurn;
}
//# sourceMappingURL=ConversationEvaluators.d.ts.map