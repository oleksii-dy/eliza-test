import { z } from 'zod';
export interface EnhancedEvaluationResult {
    evaluator_type: string;
    success: boolean;
    summary: string;
    details: Record<string, any>;
}
export interface LLMJudgeResult {
    qualitative_summary: string;
    capability_checklist: CapabilityCheck[];
}
export interface CapabilityCheck {
    capability: string;
    achieved: boolean;
    reasoning: string;
}
export declare const EnhancedEvaluationResultSchema: z.ZodObject<{
    evaluator_type: z.ZodString;
    success: z.ZodBoolean;
    summary: z.ZodString;
    details: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    evaluator_type: string;
    summary: string;
    details: Record<string, any>;
}, {
    success: boolean;
    evaluator_type: string;
    summary: string;
    details: Record<string, any>;
}>;
export declare const CapabilityCheckSchema: z.ZodObject<{
    capability: z.ZodString;
    achieved: z.ZodBoolean;
    reasoning: z.ZodString;
}, "strip", z.ZodTypeAny, {
    capability: string;
    achieved: boolean;
    reasoning: string;
}, {
    capability: string;
    achieved: boolean;
    reasoning: string;
}>;
export declare const LLMJudgeResultSchema: z.ZodObject<{
    qualitative_summary: z.ZodString;
    capability_checklist: z.ZodArray<z.ZodObject<{
        capability: z.ZodString;
        achieved: z.ZodBoolean;
        reasoning: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        capability: string;
        achieved: boolean;
        reasoning: string;
    }, {
        capability: string;
        achieved: boolean;
        reasoning: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    qualitative_summary: string;
    capability_checklist: {
        capability: string;
        achieved: boolean;
        reasoning: string;
    }[];
}, {
    qualitative_summary: string;
    capability_checklist: {
        capability: string;
        achieved: boolean;
        reasoning: string;
    }[];
}>;
export declare const EvaluationSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"string_contains">;
    value: z.ZodString;
    case_sensitive: z.ZodOptional<z.ZodBoolean>;
}>, "strip", z.ZodTypeAny, {
    value: string;
    type: "string_contains";
    case_sensitive?: boolean | undefined;
}, {
    value: string;
    type: "string_contains";
    case_sensitive?: boolean | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"regex_match">;
    pattern: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    type: "regex_match";
    pattern: string;
}, {
    type: "regex_match";
    pattern: string;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"file_exists">;
    path: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    path: string;
    type: "file_exists";
}, {
    path: string;
    type: "file_exists";
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"trajectory_contains_action">;
    action: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    type: "trajectory_contains_action";
    action: string;
}, {
    type: "trajectory_contains_action";
    action: string;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"llm_judge">;
    prompt: z.ZodString;
    expected: z.ZodString;
    model_type: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    json_schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    capabilities: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}>, "strip", z.ZodTypeAny, {
    type: "llm_judge";
    expected: string;
    prompt: string;
    model_type?: string | undefined;
    temperature?: number | undefined;
    json_schema?: Record<string, any> | undefined;
    capabilities?: string[] | undefined;
}, {
    type: "llm_judge";
    expected: string;
    prompt: string;
    model_type?: string | undefined;
    temperature?: number | undefined;
    json_schema?: Record<string, any> | undefined;
    capabilities?: string[] | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"execution_time">;
    max_duration_ms: z.ZodNumber;
    min_duration_ms: z.ZodOptional<z.ZodNumber>;
    target_duration_ms: z.ZodOptional<z.ZodNumber>;
}>, "strip", z.ZodTypeAny, {
    type: "execution_time";
    max_duration_ms: number;
    min_duration_ms?: number | undefined;
    target_duration_ms?: number | undefined;
}, {
    type: "execution_time";
    max_duration_ms: number;
    min_duration_ms?: number | undefined;
    target_duration_ms?: number | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"conversation_length">;
    min_turns: z.ZodOptional<z.ZodNumber>;
    max_turns: z.ZodOptional<z.ZodNumber>;
    optimal_turns: z.ZodOptional<z.ZodNumber>;
    target_range: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>, number[] | undefined, number[] | undefined>;
}>, "strip", z.ZodTypeAny, {
    type: "conversation_length";
    min_turns?: number | undefined;
    max_turns?: number | undefined;
    optimal_turns?: number | undefined;
    target_range?: number[] | undefined;
}, {
    type: "conversation_length";
    min_turns?: number | undefined;
    max_turns?: number | undefined;
    optimal_turns?: number | undefined;
    target_range?: number[] | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"conversation_flow">;
    required_patterns: z.ZodArray<z.ZodEnum<["question_then_answer", "problem_then_solution", "clarification_cycle", "empathy_then_solution", "escalation_pattern"]>, "many">;
    flow_quality_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
}>, "strip", z.ZodTypeAny, {
    type: "conversation_flow";
    required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
    flow_quality_threshold: number;
}, {
    type: "conversation_flow";
    required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
    flow_quality_threshold?: number | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"user_satisfaction">;
    satisfaction_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    indicators: z.ZodOptional<z.ZodObject<{
        positive: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        negative: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        positive?: string[] | undefined;
        negative?: string[] | undefined;
    }, {
        positive?: string[] | undefined;
        negative?: string[] | undefined;
    }>>;
    measurement_method: z.ZodDefault<z.ZodOptional<z.ZodEnum<["sentiment_analysis", "keyword_analysis", "llm_judge"]>>>;
}>, "strip", z.ZodTypeAny, {
    type: "user_satisfaction";
    satisfaction_threshold: number;
    measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
    indicators?: {
        positive?: string[] | undefined;
        negative?: string[] | undefined;
    } | undefined;
}, {
    type: "user_satisfaction";
    satisfaction_threshold?: number | undefined;
    indicators?: {
        positive?: string[] | undefined;
        negative?: string[] | undefined;
    } | undefined;
    measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodString;
}, {
    type: z.ZodLiteral<"context_retention">;
    test_memory_of: z.ZodArray<z.ZodString, "many">;
    retention_turns: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    memory_accuracy_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
}>, "strip", z.ZodTypeAny, {
    type: "context_retention";
    test_memory_of: string[];
    retention_turns: number;
    memory_accuracy_threshold: number;
}, {
    type: "context_retention";
    test_memory_of: string[];
    retention_turns?: number | undefined;
    memory_accuracy_threshold?: number | undefined;
}>]>;
declare const PluginConfigSchema: z.ZodObject<{
    name: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
    config: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    enabled: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    enabled: boolean;
    version?: string | undefined;
    config?: Record<string, any> | undefined;
}, {
    name: string;
    enabled?: boolean | undefined;
    version?: string | undefined;
    config?: Record<string, any> | undefined;
}>;
declare const PluginReferenceSchema: z.ZodUnion<[z.ZodString, z.ZodObject<{
    name: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
    config: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    enabled: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    enabled: boolean;
    version?: string | undefined;
    config?: Record<string, any> | undefined;
}, {
    name: string;
    enabled?: boolean | undefined;
    version?: string | undefined;
    config?: Record<string, any> | undefined;
}>]>;
export declare const ScenarioSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodString;
    plugins: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
        name: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
        config: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        enabled: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        enabled: boolean;
        version?: string | undefined;
        config?: Record<string, any> | undefined;
    }, {
        name: string;
        enabled?: boolean | undefined;
        version?: string | undefined;
        config?: Record<string, any> | undefined;
    }>]>, "many">>;
    environment: z.ZodObject<{
        type: z.ZodEnum<["e2b", "local"]>;
    }, "strip", z.ZodTypeAny, {
        type: "local" | "e2b";
    }, {
        type: "local" | "e2b";
    }>;
    setup: z.ZodOptional<z.ZodObject<{
        mocks: z.ZodOptional<z.ZodArray<z.ZodObject<{
            service: z.ZodOptional<z.ZodString>;
            method: z.ZodString;
            when: z.ZodOptional<z.ZodObject<{
                args: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
                input: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
                context: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
                matcher: z.ZodOptional<z.ZodString>;
                partialArgs: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                context?: Record<string, any> | undefined;
                args?: any[] | undefined;
                input?: Record<string, any> | undefined;
                matcher?: string | undefined;
                partialArgs?: any[] | undefined;
            }, {
                context?: Record<string, any> | undefined;
                args?: any[] | undefined;
                input?: Record<string, any> | undefined;
                matcher?: string | undefined;
                partialArgs?: any[] | undefined;
            }>>;
            response: z.ZodAny;
            responseFn: z.ZodOptional<z.ZodString>;
            error: z.ZodOptional<z.ZodObject<{
                code: z.ZodString;
                message: z.ZodString;
                status: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                code: string;
                status?: number | undefined;
            }, {
                message: string;
                code: string;
                status?: number | undefined;
            }>>;
            metadata: z.ZodOptional<z.ZodObject<{
                delay: z.ZodOptional<z.ZodNumber>;
                probability: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                delay?: number | undefined;
                probability?: number | undefined;
            }, {
                delay?: number | undefined;
                probability?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            method: string;
            error?: {
                message: string;
                code: string;
                status?: number | undefined;
            } | undefined;
            metadata?: {
                delay?: number | undefined;
                probability?: number | undefined;
            } | undefined;
            service?: string | undefined;
            when?: {
                context?: Record<string, any> | undefined;
                args?: any[] | undefined;
                input?: Record<string, any> | undefined;
                matcher?: string | undefined;
                partialArgs?: any[] | undefined;
            } | undefined;
            response?: any;
            responseFn?: string | undefined;
        }, {
            method: string;
            error?: {
                message: string;
                code: string;
                status?: number | undefined;
            } | undefined;
            metadata?: {
                delay?: number | undefined;
                probability?: number | undefined;
            } | undefined;
            service?: string | undefined;
            when?: {
                context?: Record<string, any> | undefined;
                args?: any[] | undefined;
                input?: Record<string, any> | undefined;
                matcher?: string | undefined;
                partialArgs?: any[] | undefined;
            } | undefined;
            response?: any;
            responseFn?: string | undefined;
        }>, "many">>;
        virtual_fs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        mocks?: {
            method: string;
            error?: {
                message: string;
                code: string;
                status?: number | undefined;
            } | undefined;
            metadata?: {
                delay?: number | undefined;
                probability?: number | undefined;
            } | undefined;
            service?: string | undefined;
            when?: {
                context?: Record<string, any> | undefined;
                args?: any[] | undefined;
                input?: Record<string, any> | undefined;
                matcher?: string | undefined;
                partialArgs?: any[] | undefined;
            } | undefined;
            response?: any;
            responseFn?: string | undefined;
        }[] | undefined;
        virtual_fs?: Record<string, string> | undefined;
    }, {
        mocks?: {
            method: string;
            error?: {
                message: string;
                code: string;
                status?: number | undefined;
            } | undefined;
            metadata?: {
                delay?: number | undefined;
                probability?: number | undefined;
            } | undefined;
            service?: string | undefined;
            when?: {
                context?: Record<string, any> | undefined;
                args?: any[] | undefined;
                input?: Record<string, any> | undefined;
                matcher?: string | undefined;
                partialArgs?: any[] | undefined;
            } | undefined;
            response?: any;
            responseFn?: string | undefined;
        }[] | undefined;
        virtual_fs?: Record<string, string> | undefined;
    }>>;
    run: z.ZodArray<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        lang: z.ZodOptional<z.ZodString>;
        code: z.ZodOptional<z.ZodString>;
        input: z.ZodOptional<z.ZodString>;
        evaluations: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"string_contains">;
            value: z.ZodString;
            case_sensitive: z.ZodOptional<z.ZodBoolean>;
        }>, "strip", z.ZodTypeAny, {
            value: string;
            type: "string_contains";
            case_sensitive?: boolean | undefined;
        }, {
            value: string;
            type: "string_contains";
            case_sensitive?: boolean | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"regex_match">;
            pattern: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            type: "regex_match";
            pattern: string;
        }, {
            type: "regex_match";
            pattern: string;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"file_exists">;
            path: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            path: string;
            type: "file_exists";
        }, {
            path: string;
            type: "file_exists";
        }>, z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"trajectory_contains_action">;
            action: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            type: "trajectory_contains_action";
            action: string;
        }, {
            type: "trajectory_contains_action";
            action: string;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"llm_judge">;
            prompt: z.ZodString;
            expected: z.ZodString;
            model_type: z.ZodOptional<z.ZodString>;
            temperature: z.ZodOptional<z.ZodNumber>;
            json_schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
            capabilities: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }>, "strip", z.ZodTypeAny, {
            type: "llm_judge";
            expected: string;
            prompt: string;
            model_type?: string | undefined;
            temperature?: number | undefined;
            json_schema?: Record<string, any> | undefined;
            capabilities?: string[] | undefined;
        }, {
            type: "llm_judge";
            expected: string;
            prompt: string;
            model_type?: string | undefined;
            temperature?: number | undefined;
            json_schema?: Record<string, any> | undefined;
            capabilities?: string[] | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"execution_time">;
            max_duration_ms: z.ZodNumber;
            min_duration_ms: z.ZodOptional<z.ZodNumber>;
            target_duration_ms: z.ZodOptional<z.ZodNumber>;
        }>, "strip", z.ZodTypeAny, {
            type: "execution_time";
            max_duration_ms: number;
            min_duration_ms?: number | undefined;
            target_duration_ms?: number | undefined;
        }, {
            type: "execution_time";
            max_duration_ms: number;
            min_duration_ms?: number | undefined;
            target_duration_ms?: number | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"conversation_length">;
            min_turns: z.ZodOptional<z.ZodNumber>;
            max_turns: z.ZodOptional<z.ZodNumber>;
            optimal_turns: z.ZodOptional<z.ZodNumber>;
            target_range: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>, number[] | undefined, number[] | undefined>;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_length";
            min_turns?: number | undefined;
            max_turns?: number | undefined;
            optimal_turns?: number | undefined;
            target_range?: number[] | undefined;
        }, {
            type: "conversation_length";
            min_turns?: number | undefined;
            max_turns?: number | undefined;
            optimal_turns?: number | undefined;
            target_range?: number[] | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"conversation_flow">;
            required_patterns: z.ZodArray<z.ZodEnum<["question_then_answer", "problem_then_solution", "clarification_cycle", "empathy_then_solution", "escalation_pattern"]>, "many">;
            flow_quality_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        }>, "strip", z.ZodTypeAny, {
            type: "conversation_flow";
            required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
            flow_quality_threshold: number;
        }, {
            type: "conversation_flow";
            required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
            flow_quality_threshold?: number | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"user_satisfaction">;
            satisfaction_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
            indicators: z.ZodOptional<z.ZodObject<{
                positive: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                negative: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                positive?: string[] | undefined;
                negative?: string[] | undefined;
            }, {
                positive?: string[] | undefined;
                negative?: string[] | undefined;
            }>>;
            measurement_method: z.ZodDefault<z.ZodOptional<z.ZodEnum<["sentiment_analysis", "keyword_analysis", "llm_judge"]>>>;
        }>, "strip", z.ZodTypeAny, {
            type: "user_satisfaction";
            satisfaction_threshold: number;
            measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
            indicators?: {
                positive?: string[] | undefined;
                negative?: string[] | undefined;
            } | undefined;
        }, {
            type: "user_satisfaction";
            satisfaction_threshold?: number | undefined;
            indicators?: {
                positive?: string[] | undefined;
                negative?: string[] | undefined;
            } | undefined;
            measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            type: z.ZodString;
        }, {
            type: z.ZodLiteral<"context_retention">;
            test_memory_of: z.ZodArray<z.ZodString, "many">;
            retention_turns: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
            memory_accuracy_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        }>, "strip", z.ZodTypeAny, {
            type: "context_retention";
            test_memory_of: string[];
            retention_turns: number;
            memory_accuracy_threshold: number;
        }, {
            type: "context_retention";
            test_memory_of: string[];
            retention_turns?: number | undefined;
            memory_accuracy_threshold?: number | undefined;
        }>]>, "many">;
        conversation: z.ZodOptional<z.ZodObject<{
            max_turns: z.ZodNumber;
            timeout_per_turn_ms: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
            total_timeout_ms: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
            user_simulator: z.ZodObject<{
                model_type: z.ZodDefault<z.ZodOptional<z.ZodString>>;
                temperature: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
                max_tokens: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
                persona: z.ZodString;
                objective: z.ZodString;
                style: z.ZodOptional<z.ZodString>;
                constraints: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
                emotional_state: z.ZodOptional<z.ZodString>;
                knowledge_level: z.ZodDefault<z.ZodOptional<z.ZodEnum<["beginner", "intermediate", "expert"]>>>;
            }, "strip", z.ZodTypeAny, {
                model_type: string;
                temperature: number;
                max_tokens: number;
                persona: string;
                objective: string;
                constraints: string[];
                knowledge_level: "beginner" | "intermediate" | "expert";
                style?: string | undefined;
                emotional_state?: string | undefined;
            }, {
                persona: string;
                objective: string;
                style?: string | undefined;
                model_type?: string | undefined;
                temperature?: number | undefined;
                max_tokens?: number | undefined;
                constraints?: string[] | undefined;
                emotional_state?: string | undefined;
                knowledge_level?: "beginner" | "intermediate" | "expert" | undefined;
            }>;
            termination_conditions: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
                type: z.ZodEnum<["max_turns_reached", "user_expresses_satisfaction", "agent_provides_solution", "conversation_stuck", "escalation_needed", "goal_achieved", "custom_condition"]>;
                description: z.ZodOptional<z.ZodString>;
                keywords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                llm_judge: z.ZodOptional<z.ZodObject<{
                    prompt: z.ZodString;
                    threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
                }, "strip", z.ZodTypeAny, {
                    prompt: string;
                    threshold: number;
                }, {
                    prompt: string;
                    threshold?: number | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "max_turns_reached" | "user_expresses_satisfaction" | "agent_provides_solution" | "conversation_stuck" | "escalation_needed" | "goal_achieved" | "custom_condition";
                description?: string | undefined;
                llm_judge?: {
                    prompt: string;
                    threshold: number;
                } | undefined;
                keywords?: string[] | undefined;
            }, {
                type: "max_turns_reached" | "user_expresses_satisfaction" | "agent_provides_solution" | "conversation_stuck" | "escalation_needed" | "goal_achieved" | "custom_condition";
                description?: string | undefined;
                llm_judge?: {
                    prompt: string;
                    threshold?: number | undefined;
                } | undefined;
                keywords?: string[] | undefined;
            }>, "many">>>;
            turn_evaluations: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"string_contains">;
                value: z.ZodString;
                case_sensitive: z.ZodOptional<z.ZodBoolean>;
            }>, "strip", z.ZodTypeAny, {
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            }, {
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"regex_match">;
                pattern: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                type: "regex_match";
                pattern: string;
            }, {
                type: "regex_match";
                pattern: string;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"file_exists">;
                path: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                path: string;
                type: "file_exists";
            }, {
                path: string;
                type: "file_exists";
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"trajectory_contains_action">;
                action: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                type: "trajectory_contains_action";
                action: string;
            }, {
                type: "trajectory_contains_action";
                action: string;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"llm_judge">;
                prompt: z.ZodString;
                expected: z.ZodString;
                model_type: z.ZodOptional<z.ZodString>;
                temperature: z.ZodOptional<z.ZodNumber>;
                json_schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
                capabilities: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }>, "strip", z.ZodTypeAny, {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            }, {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"execution_time">;
                max_duration_ms: z.ZodNumber;
                min_duration_ms: z.ZodOptional<z.ZodNumber>;
                target_duration_ms: z.ZodOptional<z.ZodNumber>;
            }>, "strip", z.ZodTypeAny, {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            }, {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"conversation_length">;
                min_turns: z.ZodOptional<z.ZodNumber>;
                max_turns: z.ZodOptional<z.ZodNumber>;
                optimal_turns: z.ZodOptional<z.ZodNumber>;
                target_range: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>, number[] | undefined, number[] | undefined>;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            }, {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"conversation_flow">;
                required_patterns: z.ZodArray<z.ZodEnum<["question_then_answer", "problem_then_solution", "clarification_cycle", "empathy_then_solution", "escalation_pattern"]>, "many">;
                flow_quality_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold: number;
            }, {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold?: number | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"user_satisfaction">;
                satisfaction_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
                indicators: z.ZodOptional<z.ZodObject<{
                    positive: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    negative: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                }, {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                }>>;
                measurement_method: z.ZodDefault<z.ZodOptional<z.ZodEnum<["sentiment_analysis", "keyword_analysis", "llm_judge"]>>>;
            }>, "strip", z.ZodTypeAny, {
                type: "user_satisfaction";
                satisfaction_threshold: number;
                measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
            }, {
                type: "user_satisfaction";
                satisfaction_threshold?: number | undefined;
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
                measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"context_retention">;
                test_memory_of: z.ZodArray<z.ZodString, "many">;
                retention_turns: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
                memory_accuracy_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
            }>, "strip", z.ZodTypeAny, {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns: number;
                memory_accuracy_threshold: number;
            }, {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns?: number | undefined;
                memory_accuracy_threshold?: number | undefined;
            }>]>, "many">>>;
            final_evaluations: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"string_contains">;
                value: z.ZodString;
                case_sensitive: z.ZodOptional<z.ZodBoolean>;
            }>, "strip", z.ZodTypeAny, {
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            }, {
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"regex_match">;
                pattern: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                type: "regex_match";
                pattern: string;
            }, {
                type: "regex_match";
                pattern: string;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"file_exists">;
                path: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                path: string;
                type: "file_exists";
            }, {
                path: string;
                type: "file_exists";
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"trajectory_contains_action">;
                action: z.ZodString;
            }>, "strip", z.ZodTypeAny, {
                type: "trajectory_contains_action";
                action: string;
            }, {
                type: "trajectory_contains_action";
                action: string;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"llm_judge">;
                prompt: z.ZodString;
                expected: z.ZodString;
                model_type: z.ZodOptional<z.ZodString>;
                temperature: z.ZodOptional<z.ZodNumber>;
                json_schema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
                capabilities: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }>, "strip", z.ZodTypeAny, {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            }, {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"execution_time">;
                max_duration_ms: z.ZodNumber;
                min_duration_ms: z.ZodOptional<z.ZodNumber>;
                target_duration_ms: z.ZodOptional<z.ZodNumber>;
            }>, "strip", z.ZodTypeAny, {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            }, {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"conversation_length">;
                min_turns: z.ZodOptional<z.ZodNumber>;
                max_turns: z.ZodOptional<z.ZodNumber>;
                optimal_turns: z.ZodOptional<z.ZodNumber>;
                target_range: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>, number[] | undefined, number[] | undefined>;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            }, {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"conversation_flow">;
                required_patterns: z.ZodArray<z.ZodEnum<["question_then_answer", "problem_then_solution", "clarification_cycle", "empathy_then_solution", "escalation_pattern"]>, "many">;
                flow_quality_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
            }>, "strip", z.ZodTypeAny, {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold: number;
            }, {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold?: number | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"user_satisfaction">;
                satisfaction_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
                indicators: z.ZodOptional<z.ZodObject<{
                    positive: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    negative: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                }, {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                }>>;
                measurement_method: z.ZodDefault<z.ZodOptional<z.ZodEnum<["sentiment_analysis", "keyword_analysis", "llm_judge"]>>>;
            }>, "strip", z.ZodTypeAny, {
                type: "user_satisfaction";
                satisfaction_threshold: number;
                measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
            }, {
                type: "user_satisfaction";
                satisfaction_threshold?: number | undefined;
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
                measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"context_retention">;
                test_memory_of: z.ZodArray<z.ZodString, "many">;
                retention_turns: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
                memory_accuracy_threshold: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
            }>, "strip", z.ZodTypeAny, {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns: number;
                memory_accuracy_threshold: number;
            }, {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns?: number | undefined;
                memory_accuracy_threshold?: number | undefined;
            }>]>, "many">>>;
            debug_options: z.ZodDefault<z.ZodOptional<z.ZodObject<{
                log_user_simulation: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
                log_turn_decisions: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
                export_full_transcript: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                log_user_simulation: boolean;
                log_turn_decisions: boolean;
                export_full_transcript: boolean;
            }, {
                log_user_simulation?: boolean | undefined;
                log_turn_decisions?: boolean | undefined;
                export_full_transcript?: boolean | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            max_turns: number;
            timeout_per_turn_ms: number;
            total_timeout_ms: number;
            user_simulator: {
                model_type: string;
                temperature: number;
                max_tokens: number;
                persona: string;
                objective: string;
                constraints: string[];
                knowledge_level: "beginner" | "intermediate" | "expert";
                style?: string | undefined;
                emotional_state?: string | undefined;
            };
            termination_conditions: {
                type: "max_turns_reached" | "user_expresses_satisfaction" | "agent_provides_solution" | "conversation_stuck" | "escalation_needed" | "goal_achieved" | "custom_condition";
                description?: string | undefined;
                llm_judge?: {
                    prompt: string;
                    threshold: number;
                } | undefined;
                keywords?: string[] | undefined;
            }[];
            turn_evaluations: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold: number;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold: number;
                measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns: number;
                memory_accuracy_threshold: number;
            })[];
            final_evaluations: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold: number;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold: number;
                measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns: number;
                memory_accuracy_threshold: number;
            })[];
            debug_options: {
                log_user_simulation: boolean;
                log_turn_decisions: boolean;
                export_full_transcript: boolean;
            };
        }, {
            max_turns: number;
            user_simulator: {
                persona: string;
                objective: string;
                style?: string | undefined;
                model_type?: string | undefined;
                temperature?: number | undefined;
                max_tokens?: number | undefined;
                constraints?: string[] | undefined;
                emotional_state?: string | undefined;
                knowledge_level?: "beginner" | "intermediate" | "expert" | undefined;
            };
            timeout_per_turn_ms?: number | undefined;
            total_timeout_ms?: number | undefined;
            termination_conditions?: {
                type: "max_turns_reached" | "user_expresses_satisfaction" | "agent_provides_solution" | "conversation_stuck" | "escalation_needed" | "goal_achieved" | "custom_condition";
                description?: string | undefined;
                llm_judge?: {
                    prompt: string;
                    threshold?: number | undefined;
                } | undefined;
                keywords?: string[] | undefined;
            }[] | undefined;
            turn_evaluations?: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold?: number | undefined;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold?: number | undefined;
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
                measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns?: number | undefined;
                memory_accuracy_threshold?: number | undefined;
            })[] | undefined;
            final_evaluations?: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold?: number | undefined;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold?: number | undefined;
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
                measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns?: number | undefined;
                memory_accuracy_threshold?: number | undefined;
            })[] | undefined;
            debug_options?: {
                log_user_simulation?: boolean | undefined;
                log_turn_decisions?: boolean | undefined;
                export_full_transcript?: boolean | undefined;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        evaluations: ({
            value: string;
            type: "string_contains";
            case_sensitive?: boolean | undefined;
        } | {
            type: "regex_match";
            pattern: string;
        } | {
            path: string;
            type: "file_exists";
        } | {
            type: "trajectory_contains_action";
            action: string;
        } | {
            type: "llm_judge";
            expected: string;
            prompt: string;
            model_type?: string | undefined;
            temperature?: number | undefined;
            json_schema?: Record<string, any> | undefined;
            capabilities?: string[] | undefined;
        } | {
            type: "execution_time";
            max_duration_ms: number;
            min_duration_ms?: number | undefined;
            target_duration_ms?: number | undefined;
        } | {
            type: "conversation_length";
            min_turns?: number | undefined;
            max_turns?: number | undefined;
            optimal_turns?: number | undefined;
            target_range?: number[] | undefined;
        } | {
            type: "conversation_flow";
            required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
            flow_quality_threshold: number;
        } | {
            type: "user_satisfaction";
            satisfaction_threshold: number;
            measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
            indicators?: {
                positive?: string[] | undefined;
                negative?: string[] | undefined;
            } | undefined;
        } | {
            type: "context_retention";
            test_memory_of: string[];
            retention_turns: number;
            memory_accuracy_threshold: number;
        })[];
        name?: string | undefined;
        code?: string | undefined;
        input?: string | undefined;
        lang?: string | undefined;
        conversation?: {
            max_turns: number;
            timeout_per_turn_ms: number;
            total_timeout_ms: number;
            user_simulator: {
                model_type: string;
                temperature: number;
                max_tokens: number;
                persona: string;
                objective: string;
                constraints: string[];
                knowledge_level: "beginner" | "intermediate" | "expert";
                style?: string | undefined;
                emotional_state?: string | undefined;
            };
            termination_conditions: {
                type: "max_turns_reached" | "user_expresses_satisfaction" | "agent_provides_solution" | "conversation_stuck" | "escalation_needed" | "goal_achieved" | "custom_condition";
                description?: string | undefined;
                llm_judge?: {
                    prompt: string;
                    threshold: number;
                } | undefined;
                keywords?: string[] | undefined;
            }[];
            turn_evaluations: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold: number;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold: number;
                measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns: number;
                memory_accuracy_threshold: number;
            })[];
            final_evaluations: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold: number;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold: number;
                measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns: number;
                memory_accuracy_threshold: number;
            })[];
            debug_options: {
                log_user_simulation: boolean;
                log_turn_decisions: boolean;
                export_full_transcript: boolean;
            };
        } | undefined;
    }, {
        evaluations: ({
            value: string;
            type: "string_contains";
            case_sensitive?: boolean | undefined;
        } | {
            type: "regex_match";
            pattern: string;
        } | {
            path: string;
            type: "file_exists";
        } | {
            type: "trajectory_contains_action";
            action: string;
        } | {
            type: "llm_judge";
            expected: string;
            prompt: string;
            model_type?: string | undefined;
            temperature?: number | undefined;
            json_schema?: Record<string, any> | undefined;
            capabilities?: string[] | undefined;
        } | {
            type: "execution_time";
            max_duration_ms: number;
            min_duration_ms?: number | undefined;
            target_duration_ms?: number | undefined;
        } | {
            type: "conversation_length";
            min_turns?: number | undefined;
            max_turns?: number | undefined;
            optimal_turns?: number | undefined;
            target_range?: number[] | undefined;
        } | {
            type: "conversation_flow";
            required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
            flow_quality_threshold?: number | undefined;
        } | {
            type: "user_satisfaction";
            satisfaction_threshold?: number | undefined;
            indicators?: {
                positive?: string[] | undefined;
                negative?: string[] | undefined;
            } | undefined;
            measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
        } | {
            type: "context_retention";
            test_memory_of: string[];
            retention_turns?: number | undefined;
            memory_accuracy_threshold?: number | undefined;
        })[];
        name?: string | undefined;
        code?: string | undefined;
        input?: string | undefined;
        lang?: string | undefined;
        conversation?: {
            max_turns: number;
            user_simulator: {
                persona: string;
                objective: string;
                style?: string | undefined;
                model_type?: string | undefined;
                temperature?: number | undefined;
                max_tokens?: number | undefined;
                constraints?: string[] | undefined;
                emotional_state?: string | undefined;
                knowledge_level?: "beginner" | "intermediate" | "expert" | undefined;
            };
            timeout_per_turn_ms?: number | undefined;
            total_timeout_ms?: number | undefined;
            termination_conditions?: {
                type: "max_turns_reached" | "user_expresses_satisfaction" | "agent_provides_solution" | "conversation_stuck" | "escalation_needed" | "goal_achieved" | "custom_condition";
                description?: string | undefined;
                llm_judge?: {
                    prompt: string;
                    threshold?: number | undefined;
                } | undefined;
                keywords?: string[] | undefined;
            }[] | undefined;
            turn_evaluations?: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold?: number | undefined;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold?: number | undefined;
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
                measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns?: number | undefined;
                memory_accuracy_threshold?: number | undefined;
            })[] | undefined;
            final_evaluations?: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold?: number | undefined;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold?: number | undefined;
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
                measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns?: number | undefined;
                memory_accuracy_threshold?: number | undefined;
            })[] | undefined;
            debug_options?: {
                log_user_simulation?: boolean | undefined;
                log_turn_decisions?: boolean | undefined;
                export_full_transcript?: boolean | undefined;
            } | undefined;
        } | undefined;
    }>, "many">;
    judgment: z.ZodObject<{
        strategy: z.ZodEnum<["all_pass", "any_pass"]>;
    }, "strip", z.ZodTypeAny, {
        strategy: "all_pass" | "any_pass";
    }, {
        strategy: "all_pass" | "any_pass";
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    run: {
        evaluations: ({
            value: string;
            type: "string_contains";
            case_sensitive?: boolean | undefined;
        } | {
            type: "regex_match";
            pattern: string;
        } | {
            path: string;
            type: "file_exists";
        } | {
            type: "trajectory_contains_action";
            action: string;
        } | {
            type: "llm_judge";
            expected: string;
            prompt: string;
            model_type?: string | undefined;
            temperature?: number | undefined;
            json_schema?: Record<string, any> | undefined;
            capabilities?: string[] | undefined;
        } | {
            type: "execution_time";
            max_duration_ms: number;
            min_duration_ms?: number | undefined;
            target_duration_ms?: number | undefined;
        } | {
            type: "conversation_length";
            min_turns?: number | undefined;
            max_turns?: number | undefined;
            optimal_turns?: number | undefined;
            target_range?: number[] | undefined;
        } | {
            type: "conversation_flow";
            required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
            flow_quality_threshold: number;
        } | {
            type: "user_satisfaction";
            satisfaction_threshold: number;
            measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
            indicators?: {
                positive?: string[] | undefined;
                negative?: string[] | undefined;
            } | undefined;
        } | {
            type: "context_retention";
            test_memory_of: string[];
            retention_turns: number;
            memory_accuracy_threshold: number;
        })[];
        name?: string | undefined;
        code?: string | undefined;
        input?: string | undefined;
        lang?: string | undefined;
        conversation?: {
            max_turns: number;
            timeout_per_turn_ms: number;
            total_timeout_ms: number;
            user_simulator: {
                model_type: string;
                temperature: number;
                max_tokens: number;
                persona: string;
                objective: string;
                constraints: string[];
                knowledge_level: "beginner" | "intermediate" | "expert";
                style?: string | undefined;
                emotional_state?: string | undefined;
            };
            termination_conditions: {
                type: "max_turns_reached" | "user_expresses_satisfaction" | "agent_provides_solution" | "conversation_stuck" | "escalation_needed" | "goal_achieved" | "custom_condition";
                description?: string | undefined;
                llm_judge?: {
                    prompt: string;
                    threshold: number;
                } | undefined;
                keywords?: string[] | undefined;
            }[];
            turn_evaluations: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold: number;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold: number;
                measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns: number;
                memory_accuracy_threshold: number;
            })[];
            final_evaluations: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold: number;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold: number;
                measurement_method: "llm_judge" | "sentiment_analysis" | "keyword_analysis";
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns: number;
                memory_accuracy_threshold: number;
            })[];
            debug_options: {
                log_user_simulation: boolean;
                log_turn_decisions: boolean;
                export_full_transcript: boolean;
            };
        } | undefined;
    }[];
    description: string;
    environment: {
        type: "local" | "e2b";
    };
    judgment: {
        strategy: "all_pass" | "any_pass";
    };
    plugins?: (string | {
        name: string;
        enabled: boolean;
        version?: string | undefined;
        config?: Record<string, any> | undefined;
    })[] | undefined;
    setup?: {
        mocks?: {
            method: string;
            error?: {
                message: string;
                code: string;
                status?: number | undefined;
            } | undefined;
            metadata?: {
                delay?: number | undefined;
                probability?: number | undefined;
            } | undefined;
            service?: string | undefined;
            when?: {
                context?: Record<string, any> | undefined;
                args?: any[] | undefined;
                input?: Record<string, any> | undefined;
                matcher?: string | undefined;
                partialArgs?: any[] | undefined;
            } | undefined;
            response?: any;
            responseFn?: string | undefined;
        }[] | undefined;
        virtual_fs?: Record<string, string> | undefined;
    } | undefined;
}, {
    name: string;
    run: {
        evaluations: ({
            value: string;
            type: "string_contains";
            case_sensitive?: boolean | undefined;
        } | {
            type: "regex_match";
            pattern: string;
        } | {
            path: string;
            type: "file_exists";
        } | {
            type: "trajectory_contains_action";
            action: string;
        } | {
            type: "llm_judge";
            expected: string;
            prompt: string;
            model_type?: string | undefined;
            temperature?: number | undefined;
            json_schema?: Record<string, any> | undefined;
            capabilities?: string[] | undefined;
        } | {
            type: "execution_time";
            max_duration_ms: number;
            min_duration_ms?: number | undefined;
            target_duration_ms?: number | undefined;
        } | {
            type: "conversation_length";
            min_turns?: number | undefined;
            max_turns?: number | undefined;
            optimal_turns?: number | undefined;
            target_range?: number[] | undefined;
        } | {
            type: "conversation_flow";
            required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
            flow_quality_threshold?: number | undefined;
        } | {
            type: "user_satisfaction";
            satisfaction_threshold?: number | undefined;
            indicators?: {
                positive?: string[] | undefined;
                negative?: string[] | undefined;
            } | undefined;
            measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
        } | {
            type: "context_retention";
            test_memory_of: string[];
            retention_turns?: number | undefined;
            memory_accuracy_threshold?: number | undefined;
        })[];
        name?: string | undefined;
        code?: string | undefined;
        input?: string | undefined;
        lang?: string | undefined;
        conversation?: {
            max_turns: number;
            user_simulator: {
                persona: string;
                objective: string;
                style?: string | undefined;
                model_type?: string | undefined;
                temperature?: number | undefined;
                max_tokens?: number | undefined;
                constraints?: string[] | undefined;
                emotional_state?: string | undefined;
                knowledge_level?: "beginner" | "intermediate" | "expert" | undefined;
            };
            timeout_per_turn_ms?: number | undefined;
            total_timeout_ms?: number | undefined;
            termination_conditions?: {
                type: "max_turns_reached" | "user_expresses_satisfaction" | "agent_provides_solution" | "conversation_stuck" | "escalation_needed" | "goal_achieved" | "custom_condition";
                description?: string | undefined;
                llm_judge?: {
                    prompt: string;
                    threshold?: number | undefined;
                } | undefined;
                keywords?: string[] | undefined;
            }[] | undefined;
            turn_evaluations?: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold?: number | undefined;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold?: number | undefined;
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
                measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns?: number | undefined;
                memory_accuracy_threshold?: number | undefined;
            })[] | undefined;
            final_evaluations?: ({
                value: string;
                type: "string_contains";
                case_sensitive?: boolean | undefined;
            } | {
                type: "regex_match";
                pattern: string;
            } | {
                path: string;
                type: "file_exists";
            } | {
                type: "trajectory_contains_action";
                action: string;
            } | {
                type: "llm_judge";
                expected: string;
                prompt: string;
                model_type?: string | undefined;
                temperature?: number | undefined;
                json_schema?: Record<string, any> | undefined;
                capabilities?: string[] | undefined;
            } | {
                type: "execution_time";
                max_duration_ms: number;
                min_duration_ms?: number | undefined;
                target_duration_ms?: number | undefined;
            } | {
                type: "conversation_length";
                min_turns?: number | undefined;
                max_turns?: number | undefined;
                optimal_turns?: number | undefined;
                target_range?: number[] | undefined;
            } | {
                type: "conversation_flow";
                required_patterns: ("question_then_answer" | "problem_then_solution" | "clarification_cycle" | "empathy_then_solution" | "escalation_pattern")[];
                flow_quality_threshold?: number | undefined;
            } | {
                type: "user_satisfaction";
                satisfaction_threshold?: number | undefined;
                indicators?: {
                    positive?: string[] | undefined;
                    negative?: string[] | undefined;
                } | undefined;
                measurement_method?: "llm_judge" | "sentiment_analysis" | "keyword_analysis" | undefined;
            } | {
                type: "context_retention";
                test_memory_of: string[];
                retention_turns?: number | undefined;
                memory_accuracy_threshold?: number | undefined;
            })[] | undefined;
            debug_options?: {
                log_user_simulation?: boolean | undefined;
                log_turn_decisions?: boolean | undefined;
                export_full_transcript?: boolean | undefined;
            } | undefined;
        } | undefined;
    }[];
    description: string;
    environment: {
        type: "local" | "e2b";
    };
    judgment: {
        strategy: "all_pass" | "any_pass";
    };
    plugins?: (string | {
        name: string;
        enabled?: boolean | undefined;
        version?: string | undefined;
        config?: Record<string, any> | undefined;
    })[] | undefined;
    setup?: {
        mocks?: {
            method: string;
            error?: {
                message: string;
                code: string;
                status?: number | undefined;
            } | undefined;
            metadata?: {
                delay?: number | undefined;
                probability?: number | undefined;
            } | undefined;
            service?: string | undefined;
            when?: {
                context?: Record<string, any> | undefined;
                args?: any[] | undefined;
                input?: Record<string, any> | undefined;
                matcher?: string | undefined;
                partialArgs?: any[] | undefined;
            } | undefined;
            response?: any;
            responseFn?: string | undefined;
        }[] | undefined;
        virtual_fs?: Record<string, string> | undefined;
    } | undefined;
}>;
export type Scenario = z.infer<typeof ScenarioSchema>;
export type Evaluation = z.infer<typeof EvaluationSchema>;
export type PluginConfig = z.infer<typeof PluginConfigSchema>;
export type PluginReference = z.infer<typeof PluginReferenceSchema>;
/**
 * Trajectory step interface (matches GitHub ticket #5785 specification)
 */
export interface TrajectoryStep {
    /** Step type: 'thought', 'action', or 'observation' */
    type: 'thought' | 'action' | 'observation';
    /** ISO timestamp string */
    timestamp: string;
    /** Step content based on type */
    content: string | {
        name: string;
        parameters: Record<string, any>;
    } | any;
}
/**
 * Performance and resource metrics for a scenario run
 */
export interface ScenarioRunMetrics {
    /** Total execution time in seconds */
    execution_time_seconds: number;
    /** Number of LLM API calls made during the run */
    llm_calls: number;
    /** Total tokens consumed (input + output) */
    total_tokens: number;
    /** Additional custom metrics */
    [key: string]: number;
}
/**
 * Comprehensive result structure for a single scenario run.
 * This is the master interface for ticket #5786 that consolidates
 * all data from a scenario execution into a structured JSON output.
 */
export interface ScenarioRunResult {
    /** Unique identifier for this specific run */
    run_id: string;
    /** Identifier linking this run to a specific matrix combination */
    matrix_combination_id: string;
    /** The specific parameter values used for this run */
    parameters: Record<string, any>;
    /** Performance and resource metrics collected during execution */
    metrics: ScenarioRunMetrics;
    /** The final text/object response from the agent to the user */
    final_agent_response?: string;
    /** Array of structured evaluation results from the EvaluationEngine */
    evaluations: EnhancedEvaluationResult[];
    /** Array of trajectory steps showing the agent's cognitive process */
    trajectory: TrajectoryStep[];
    /** Error message if the run failed unexpectedly (null for successful runs) */
    error: string | null;
}
export declare const ScenarioRunResultSchema: z.ZodObject<{
    run_id: z.ZodString;
    matrix_combination_id: z.ZodString;
    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
    metrics: z.ZodObject<{
        execution_time_seconds: z.ZodNumber;
        llm_calls: z.ZodNumber;
        total_tokens: z.ZodNumber;
    }, "strip", z.ZodNumber, z.objectOutputType<{
        execution_time_seconds: z.ZodNumber;
        llm_calls: z.ZodNumber;
        total_tokens: z.ZodNumber;
    }, z.ZodNumber, "strip">, z.objectInputType<{
        execution_time_seconds: z.ZodNumber;
        llm_calls: z.ZodNumber;
        total_tokens: z.ZodNumber;
    }, z.ZodNumber, "strip">>;
    final_agent_response: z.ZodOptional<z.ZodString>;
    evaluations: z.ZodArray<z.ZodObject<{
        evaluator_type: z.ZodString;
        success: z.ZodBoolean;
        summary: z.ZodString;
        details: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        success: boolean;
        evaluator_type: string;
        summary: string;
        details: Record<string, any>;
    }, {
        success: boolean;
        evaluator_type: string;
        summary: string;
        details: Record<string, any>;
    }>, "many">;
    trajectory: z.ZodArray<z.ZodObject<{
        type: z.ZodEnum<["thought", "action", "observation"]>;
        timestamp: z.ZodEffects<z.ZodString, string, string>;
        content: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        type: "action" | "thought" | "observation";
        timestamp: string;
        content?: any;
    }, {
        type: "action" | "thought" | "observation";
        timestamp: string;
        content?: any;
    }>, "many">;
    error: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error: string | null;
    evaluations: {
        success: boolean;
        evaluator_type: string;
        summary: string;
        details: Record<string, any>;
    }[];
    run_id: string;
    matrix_combination_id: string;
    parameters: Record<string, any>;
    metrics: {
        execution_time_seconds: number;
        llm_calls: number;
        total_tokens: number;
    } & {
        [k: string]: number;
    };
    trajectory: {
        type: "action" | "thought" | "observation";
        timestamp: string;
        content?: any;
    }[];
    final_agent_response?: string | undefined;
}, {
    error: string | null;
    evaluations: {
        success: boolean;
        evaluator_type: string;
        summary: string;
        details: Record<string, any>;
    }[];
    run_id: string;
    matrix_combination_id: string;
    parameters: Record<string, any>;
    metrics: {
        execution_time_seconds: number;
        llm_calls: number;
        total_tokens: number;
    } & {
        [k: string]: number;
    };
    trajectory: {
        type: "action" | "thought" | "observation";
        timestamp: string;
        content?: any;
    }[];
    final_agent_response?: string | undefined;
}>;
export {};
//# sourceMappingURL=schema.d.ts.map