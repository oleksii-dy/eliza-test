export interface MigrationGuide {
    name: string;
    path: string;
    content: string;
    category: 'basic' | 'advanced' | 'testing' | 'completion';
    keywords: string[];
}
export interface GuideSearchResult {
    guide: MigrationGuide;
    relevanceScore: number;
    matchedKeywords: string[];
}
export declare class MigrationGuideLoader {
    private guides;
    private guidesDir;
    constructor(projectRoot?: string);
    private findGuidesDirectory;
    private loadGuides;
    private createEmbeddedGuides;
    private getEmbeddedMigrationGuide;
    private getEmbeddedTestingGuide;
    private getEmbeddedCompletionGuide;
    /**
     * Search for relevant guides based on keywords or content
     */
    searchGuides(query: string, limit?: number): GuideSearchResult[];
    /**
     * Get a specific guide by name
     */
    getGuide(name: string): MigrationGuide | null;
    /**
     * Get all guides of a specific category
     */
    getGuidesByCategory(category: MigrationGuide['category']): MigrationGuide[];
    /**
     * Get guides that are most relevant for common migration issues
     */
    getRelevantGuidesForIssue(issue: string): GuideSearchResult[];
    /**
     * Generate a comprehensive migration context for Claude
     */
    generateMigrationContext(): string;
    /**
     * Get full content of all guides for RAG embedding
     */
    getAllGuidesContent(): string;
}
/**
 * Helper function to create a guide loader instance
 */
export declare function createMigrationGuideLoader(projectRoot?: string): MigrationGuideLoader;
/**
 * Helper function to get migration context for common issues
 */
export declare function getMigrationHelpForIssue(issue: string, projectRoot?: string): string;
//# sourceMappingURL=migration-guide-loader.d.ts.map