interface CreationResult {
    success: boolean;
    pluginName: string;
    pluginPath: string;
    error?: Error;
}
interface PluginSpecification {
    name: string;
    description: string;
    features: string[];
    actions?: string[];
    providers?: string[];
    evaluators?: string[];
    services?: string[];
}
export interface CreatorOptions {
    skipTests?: boolean;
    skipValidation?: boolean;
    skipPrompts?: boolean;
    spec?: PluginSpecification;
}
export declare class PluginCreator {
    private git;
    private pluginPath;
    private handleCancellation;
    private getCommaSeparatedInput;
    private anthropic;
    private activeClaudeProcess;
    private options;
    constructor(options?: CreatorOptions);
    private registerCleanupHandlers;
    initializeAnthropic(): Promise<void>;
    create(pluginSpec?: PluginSpecification): Promise<CreationResult>;
    private collectPluginSpecification;
    private createFromTemplate;
    private createPluginStructureManually;
    private generateDetailedSpecification;
    private createSpecificationDocument;
    private runGenerationWithValidation;
    private runBuildLoop;
    private runTestLoop;
    private runProductionValidationLoop;
    private runClaudeCode;
    private runClaudeCodeWithContext;
    private runClaudeCodeWithPrompt;
    private runBuild;
    private getBuildErrors;
    private runTests;
    private getTestErrors;
    private validateProductionReadiness;
    private getAllPluginFiles;
    private copyToCWD;
    private checkDiskSpace;
    private getAvailableDiskSpace;
}
export {};
//# sourceMappingURL=plugin-creator.d.ts.map