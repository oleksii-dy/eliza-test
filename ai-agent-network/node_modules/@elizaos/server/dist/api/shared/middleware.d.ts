import type { IAgentRuntime, UUID } from '@elizaos/core';
import express from 'express';
/**
 * Middleware to validate that an agent exists
 */
export declare const agentExistsMiddleware: (agents: Map<UUID, IAgentRuntime>) => (req: express.Request, res: express.Response, next: express.NextFunction) => void;
/**
 * Middleware to validate UUID parameters
 */
export declare const validateUuidMiddleware: (paramName: string) => (req: express.Request, res: express.Response, next: express.NextFunction) => void;
/**
 * Enhanced channel ID validation middleware with additional security
 */
export declare const validateChannelIdMiddleware: () => (req: express.Request, res: express.Response, next: express.NextFunction) => void;
/**
 * Security middleware to add additional API protection
 */
export declare const securityMiddleware: () => (req: express.Request, res: express.Response, next: express.NextFunction) => void;
/**
 * Middleware to validate request content type for POST/PUT/PATCH requests
 */
export declare const validateContentTypeMiddleware: () => (req: express.Request, res: express.Response, next: express.NextFunction) => void;
/**
 * General API rate limiting middleware
 */
export declare const createApiRateLimit: () => import("express-rate-limit").RateLimitRequestHandler;
/**
 * Strict rate limiting for file system operations
 */
export declare const createFileSystemRateLimit: () => import("express-rate-limit").RateLimitRequestHandler;
/**
 * Very strict rate limiting for upload operations
 */
export declare const createUploadRateLimit: () => import("express-rate-limit").RateLimitRequestHandler;
/**
 * Rate limiting specifically for channel validation attempts
 * Prevents brute force attacks on channel IDs
 */
export declare const createChannelValidationRateLimit: () => import("express-rate-limit").RateLimitRequestHandler;
