import { type IAgentRuntime, type Media, type Plugin, type Room } from '@elizaos/core';
export * from './actions/index.ts';
export * from './evaluators/index.ts';
export * from './providers/index.ts';
/**
 * Represents media data containing a buffer of data and the media type.
 * @typedef {Object} MediaData
 * @property {Buffer} data - The buffer of data.
 * @property {string} mediaType - The type of media.
 */
type MediaData = {
    data: Buffer;
    mediaType: string;
};
/**
 * Escapes special characters in a string to make it JSON-safe.
 */
/**
 * Fetches media data from a list of attachments, supporting both HTTP URLs and local file paths.
 *
 * @param attachments Array of Media objects containing URLs or file paths to fetch media from
 * @returns Promise that resolves with an array of MediaData objects containing the fetched media data and content type
 */
/**
 * Fetches media data from given attachments.
 * @param {Media[]} attachments - Array of Media objects to fetch data from.
 * @returns {Promise<MediaData[]>} - A Promise that resolves with an array of MediaData objects.
 */
export declare function fetchMediaData(attachments: Media[]): Promise<MediaData[]>;
/**
 * Processes attachments by generating descriptions for supported media types.
 * Currently supports image description generation.
 *
 * @param {Media[]} attachments - Array of attachments to process
 * @param {IAgentRuntime} runtime - The agent runtime for accessing AI models
 * @returns {Promise<Media[]>} - Returns a new array of processed attachments with added description, title, and text properties
 */
export declare function processAttachments(attachments: Media[], runtime: IAgentRuntime): Promise<Media[]>;
/**
 * Determines whether to skip the shouldRespond logic based on room type and message source.
 * Supports both default values and runtime-configurable overrides via env settings.
 */
export declare function shouldBypassShouldRespond(runtime: IAgentRuntime, room?: Room, source?: string): boolean;
export declare const bootstrapPlugin: Plugin;
export default bootstrapPlugin;
//# sourceMappingURL=index.d.ts.map