import { type IAgentRuntime, Service } from '@elizaos/core';
/**
 * Service responsible for generating embeddings asynchronously
 * This service listens for EMBEDDING_GENERATION_REQUESTED events
 * and processes them in a queue to avoid blocking the main runtime
 */
export declare class EmbeddingGenerationService extends Service {
    static serviceType: string;
    capabilityDescription: string;
    private queue;
    private isProcessing;
    private processingInterval;
    private maxQueueSize;
    private batchSize;
    private processingIntervalMs;
    static start(runtime: IAgentRuntime): Promise<Service>;
    initialize(): Promise<void>;
    private handleEmbeddingRequest;
    /**
     * Make room in the queue by removing items based on priority and age
     * Removes 10% of the queue (minimum 1, maximum 10 items)
     */
    private makeRoomInQueue;
    /**
     * Insert an item into the queue based on its priority
     * High priority items go to the front, normal in the middle, low at the end
     */
    private insertItemByPriority;
    private startProcessing;
    private processQueue;
    private generateEmbedding;
    stop(): Promise<void>;
    getQueueSize(): number;
    getQueueStats(): {
        high: number;
        normal: number;
        low: number;
        total: number;
    };
    clearQueue(): void;
}
export default EmbeddingGenerationService;
//# sourceMappingURL=embedding.d.ts.map