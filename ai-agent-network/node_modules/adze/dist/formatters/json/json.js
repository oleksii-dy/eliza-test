import Formatter from '../formatter.js';
import { hasRequiredFields } from './type-guards.js';
import { dateFormatISO, getGlobal } from '../../functions/index.js';
/**
 * Formats log messages in machine-readable JSON format.
 */
export default class JsonFormatter extends Formatter {
    /**
     * Format the date in the ISO8601 format by default.
     */
    timestampFormatFunction = (date) => dateFormatISO(date);
    /**
     * Format the log message for the browser.
     */
    formatBrowser(mods, timestamp, args) {
        return this.formatMessage(mods, timestamp, args);
    }
    /**
     * Format the log message for the server.
     */
    formatServer(mods, timestamp, args) {
        return this.formatMessage(mods, timestamp, args);
    }
    /**
     * Format the log message for NDJSON lines.
     */
    formatMessage(mods, timestamp, _args) {
        const global = getGlobal();
        const args = [..._args];
        const msg = args.shift();
        if (hasRequiredFields(this.cfg.meta)) {
            const { src, err, req_id, req, res, latency, hostname, name, ...meta } = this.cfg
                .meta;
            const { namespace, label } = mods;
            const json = {
                v: 1,
                level: this.level.level,
                levelName: this.level.levelName,
                name,
                hostname,
                msg: msg,
                args,
                pid: global.pid,
                time: timestamp,
                meta: Object.keys(meta).length > 0 ? meta : undefined,
                namespace,
                label: label?.name,
                src,
                err,
                req_id,
                req,
                res,
                latency,
            };
            return [JSON.stringify(json)];
        }
        console.warn(new Error('Adze: Required fields are missing from the log meta for generating a JSON log.'));
        return [...args];
    }
}
