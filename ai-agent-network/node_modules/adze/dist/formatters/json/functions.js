/**
 * Serializes a Request object into a JSON Log HTTP Request object.
 *
 * If `true` is passed as the second parameter, it will attempt to extract the username from the
 * request headers for base64 encoded basic authorization only. All other forms of authorization
 * will return `undefined`.
 *
 * NOTICE: The "Authorization" header will always be excluded.
 */
export async function serializeRequest(request, includeUsername = false) {
    const url = new URL(request.url);
    const json = (await request.json());
    return {
        headers: getHeaders(request.headers),
        method: request.method,
        url: request.url,
        body: json ? JSON.stringify(json) : undefined,
        remoteAddress: url.host.split(':')[0],
        remotePort: getPortFromUrl(url),
        username: includeUsername ? getUsername(request.headers) : undefined,
    };
}
/**
 * Takes a URL and attempts to extract the port number from it. If a port is not specified, it will
 * attempt to return the corresponding HTTP port. If the protocol is not HTTP or HTTPS, it will
 * return `undefined`.
 */
function getPortFromUrl(url) {
    return url.port ? parseInt(url.port) : undefined;
}
/**
 * Converts a Headers object to a plain object.
 */
function getHeaders(headers) {
    const headerObj = {};
    headers.forEach((v, k) => (headerObj[k] = v));
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { Authorization, authorization, ...rest } = headerObj;
    return rest;
}
/**
 * Attempts to extract a username from a basic Authorization header that is base64 encoded.
 * If another type of authorization is used, such as JWT, it will return `undefined`.
 */
function getUsername(headers) {
    const authorization = headers.get('Authorization');
    if (authorization) {
        const [type, encodedValue] = authorization.split(' ');
        if (type === 'Basic') {
            const decoded = atob(encodedValue);
            return decoded.split(':')[0];
        }
    }
}
/**
 * Serializes a Response object into a JSON Log HTTP Response object.
 */
export function serializeResponse(response) {
    const url = new URL(response.url);
    const headerString = Object.keys(getHeaders(response.headers)).reduce((s, k, v) => `${s}${k}: ${v}\r\n`, '');
    const header = `${url.protocol.split(':')[0].toUpperCase()} ${response.status} ${response.statusText}\r\n${headerString}\r\n`;
    return {
        statusCode: response.status,
        header,
    };
}
/**
 * Serializes an Error object into a JSON Log Error object that is compatible with JsonLogFormatMeta.
 */
export function serializeError(error) {
    return {
        message: error.message,
        name: error.name,
        stack: error.stack,
    };
}
